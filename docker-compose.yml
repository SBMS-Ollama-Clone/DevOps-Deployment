services:
  postgresql:
    image: postgres:latest
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - backend
  consul-server:
    image: hashicorp/consul:latest
    container_name: consul-server
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    ports:
      - "8500:8500"      # Web UI
      - "8600:8600/udp"  # DNS
    volumes:
      - ./data/consul:/consul/data
    networks:
      - backend
      - monitoring
  # Consul Agent
  consul-agent:
    image: hashicorp/consul:latest
    container_name: consul-agent
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: "agent -retry-join=consul-server -client=0.0.0.0"
    networks:
      - backend
      - monitoring
    depends_on:
      - consul-server
  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    environment:
      REDIS_PASSWORD: redis
    restart: unless-stopped
    networks:
      - backend
  dejavu:
    image: appbaseio/dejavu
    container_name: dejavu
    ports:
      - "1358:1358"
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - backend
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    networks:
      - backend
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./data/tempo:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin
    networks:
      - monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3300:3000"
    networks:
      - monitoring
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    command:
      - --config.file=/etc/alertmanager/config.yml
    volumes:
      - ./docker/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
    ports:
      - "9093:9093"
    networks:
      - monitoring

  # ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: elastic
      discovery.type: single-node
      http.port: 9200
      http.cors.allow-origin: http://localhost:1358, http://127.0.0.1:1358, http://dejavu:1358
      http.cors.enabled: true
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: true
      xpack.security.enabled: false
    networks:
      - monitoring
  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.3
    container_name: logstash
    volumes:
      - ./docker/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro,Z
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: logstash
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.3
    container_name: kibana
    volumes:
      - ./docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KIBANA_SYSTEM_PASSWORD: kibana
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  data:
networks:
  monitoring:
    driver: bridge
    name: monitoring
    external: true
  backend:
    driver: bridge
    name: backend
    external: true